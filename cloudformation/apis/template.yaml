AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: infospace-api

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: python3.12
    Handler: lambda_function.lambda_handler
    MemorySize: 128
    Timeout: 10
    Environment:
      Variables:
        TZ: Asia/Tokyo
  Api:
    OpenApiVersion: 3.0.2
    Cors:
      AllowMethods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod

Conditions:
  IsProd: !Equals [!Ref Stage, "prod"]

Resources:
  JwtSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${Stage}-jwt-secret"
      Description: "JWT Secret Key for token generation and validation"
      GenerateSecretString:
        SecretStringTemplate: '{"JWT_SECRET_KEY":""}'
        GenerateStringKey: "JWT_SECRET_KEY"
        PasswordLength: 32
        ExcludeCharacters: '"@/\\'

  JwtSecretParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/weekly-report/${Stage}/jwt-secret-key"
      Type: String
      Value: !Sub "{{resolve:secretsmanager:${JwtSecret}:SecretString:JWT_SECRET_KEY}}"

  # ------------------------------------------------------------#
  #  Lambda Function
  # ------------------------------------------------------------#
  OrganizationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-organization"
      CodeUri: ./src/Organization
      Policies:
        - AmazonDynamoDBFullAccess
        - Statement:
            - Effect: Allow
              Action:
                - ses:SendRawEmail
                - ses:SendEmail
              Resource: "*"
      Description: ""
      Environment:
        Variables:
          STAGE: !Ref Stage
      Layers:
        - !Ref CommonLayer

  MemberFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-member"
      CodeUri: ./src/Member
      Policies:
        - AmazonDynamoDBFullAccess
      Description: ""
      Environment:
        Variables:
          STAGE: !Ref Stage
      Layers:
        - !Ref CommonLayer

  WeeklyReportFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-weekly-report"
      CodeUri: ./src/WeeklyReport
      Policies:
        - AmazonDynamoDBFullAccess
        - Statement:
            - Effect: Allow
              Action:
                - ses:SendRawEmail
                - ses:SendEmail
              Resource: "*"
      Description: ""
      Environment:
        Variables:
          STAGE: !Ref Stage
      Layers:
        - !Ref CommonLayer

  SESFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-ses"
      CodeUri: ./src/SES
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - ses:GetIdentityVerificationAttributes
                - ses:VerifyEmailIdentity
              Resource: "*"
      Description: ""

  ScheduleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-schedule"
      CodeUri: ./src/Schedule
      Policies:
        - AmazonDynamoDBFullAccess
        - LambdaInvokePolicy:
            FunctionName: !Sub "${Stage}-send-request"
      Description: ""
      Environment:
        Variables:
          STAGE: !Ref Stage
      Layers:
        - !Ref CommonLayer

  SendRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-send-request"
      CodeUri: ./src/SendRequest
      Policies:
        - AmazonDynamoDBFullAccess
        - Statement:
            - Effect: Allow
              Action:
                - ses:SendRawEmail
                - ses:SendEmail
              Resource: "*"
      Description: ""
      Environment:
        Variables:
          STAGE: !Ref Stage
      Layers:
        - !Ref CommonLayer

  SecureParameterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-secure-parameter"
      CodeUri: ./src/SecureParameter
      Environment:
        Variables:
          JWT_SECRET_PARAMETER: !Ref JwtSecretParameter
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: !Ref JwtSecretParameter
        - SecretsManagerReadWrite
        - Statement:
            - Effect: Allow
              Action:
                - ssm:PutParameter
                - ssm:GetParameter
                - ssm:GetParameters
                - ssm:DeleteParameter
              Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/weekly-report/${Stage}/*"
      Events:
        GenerateTokenApi:
          Type: Api
          Properties:
            Path: /secure/generate
            Method: ANY
        VerifyTokenApi:
          Type: Api
          Properties:
            Path: /secure/verify
            Method: ANY

  # ------------------------------------------------------------#
  #  Lambda Layer
  # ------------------------------------------------------------#
  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: common functions
      ContentUri: ./src/layer
      CompatibleRuntimes:
        - python3.12
      RetentionPolicy: "Delete"
    Metadata:
      BuildMethod: python3.12

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL for Secure Parameter API"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
