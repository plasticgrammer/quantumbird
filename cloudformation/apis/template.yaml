AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: weekly-report-api

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: python3.12
    Handler: lambda_function.lambda_handler
    MemorySize: 128
    Timeout: 10
    Environment:
      Variables:
        STAGE: !Ref Stage
        TZ: Asia/Tokyo
        BASE_URL:
          !If [
            IsProd,
            "https://plasticgrammer.github.io/quantumbird/",
            "http://localhost:3000",
          ]
  Api:
    Auth:
      ApiKeyRequired: false
    Cors:
      AllowMethods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  UserPoolArn:
    Type: String
  WebPushPlatformApplicationArn:
    Type: String
    Default: "arn:aws:sns:ap-northeast-1:394014491996:app/GCM/fluxweek"
  StripeSecretKey:
    Type: String
    Description: "Stripe Secret Key for payment processing"
    NoEcho: true # セキュリティのため値を隠す

Conditions:
  IsProd: !Equals [!Ref Stage, "prod"]

Resources:
  JwtSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${Stage}-jwt-secret"
      Description: "JWT Secret Key for token generation and validation"
      GenerateSecretString:
        SecretStringTemplate: '{"JWT_SECRET_KEY":""}'
        GenerateStringKey: "JWT_SECRET_KEY"
        PasswordLength: 32
        ExcludeCharacters: '"@/\\'

  JwtSecretParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/weekly-report/${Stage}/jwt-secret-key"
      Type: String
      Value: !Sub "{{resolve:secretsmanager:${JwtSecret}:SecretString:JWT_SECRET_KEY}}"
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      OpenApiVersion: 3.0.2
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "resourcePath":"$context.resourcePath", "status":"$context.status", "protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      MethodSettings:
        - HttpMethod: "*"
          ResourcePath: "/*"
          LoggingLevel: ERROR
          DataTraceEnabled: true
          MetricsEnabled: true
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !Sub "${UserPoolArn}"

  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/${Stage}-api-gateway-logs"
      RetentionInDays: 7

  # ------------------------------------------------------------#
  #  Lambda Function
  # ------------------------------------------------------------#
  PublicFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-public"
      CodeUri: ./src/Public
      Policies:
        - AmazonDynamoDBFullAccess
        - Statement:
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref WebPushPlatformApplicationArn
      Description: "Handles public endpoints for any datas without requiring authentication"
      Environment:
        Variables:
          STAGE: !Ref Stage
      Layers:
        - !Ref CommonLayer
      Events:
        OrganizationReportGet:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /public/organization
            Method: GET
        OrganizationReportPost:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /public/organization
            Method: POST
        WeeklyReportGet:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /public/weekly-report
            Method: GET
        WeeklyReportPost:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /public/weekly-report
            Method: POST
        WeeklyReportPut:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /public/weekly-report
            Method: PUT
        GetMemberGet:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /public/member
            Method: GET
        GetMemberPut:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /public/member
            Method: PUT
        ProjectGet:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /public/project
            Method: GET

  BedrockFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-bedrock"
      CodeUri: ./src/Bedrock
      Timeout: 30
      MemorySize: 256
      Policies:
        - AmazonDynamoDBFullAccess
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource:
                - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-3-5-sonnet-20240620-v1:0"
      Description: "Generates weekly report advice using AWS Bedrock's Claude model"
      Environment:
        Variables:
          STAGE: !Ref Stage
      Layers:
        - !Ref CommonLayer
      Events:
        WeeklyReportAdvice:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /bedrock/advice
            Method: POST

  OrganizationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-organization"
      CodeUri: ./src/Organization
      Timeout: 30
      Policies:
        - AmazonDynamoDBFullAccess
        - Statement:
            - Effect: Allow
              Action:
                - ses:SendRawEmail
                - ses:SendEmail
              Resource: "*"
            - Effect: Allow
              Action:
                - sns:GetPlatformApplicationAttributes
                - sns:CreatePlatformEndpoint
              Resource: !Ref WebPushPlatformApplicationArn
      Description: "Manages organization-related operations"
      Environment:
        Variables:
          STAGE: !Ref Stage
          WEB_PUSH_PLATFORM_ARN: !Ref WebPushPlatformApplicationArn
      Layers:
        - !Ref CommonLayer
      Events:
        ProcOrganization:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /organization
            Method: ANY
            Auth:
              Authorizer: CognitoAuthorizer
        ProcPushSubscription:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /organization/push-subscription
            Method: ANY
            Auth:
              Authorizer: CognitoAuthorizer

  MemberFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-member"
      CodeUri: ./src/Member
      Policies:
        - AmazonDynamoDBFullAccess
      Description: "Manages member operations"
      Environment:
        Variables:
          STAGE: !Ref Stage
      Layers:
        - !Ref CommonLayer
      Events:
        ProcMember:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /member
            Method: ANY
            Auth:
              Authorizer: CognitoAuthorizer
        GetMemberProject:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /member/project
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        ConfirmedMail:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /member/mail
            Method: put

  WeeklyReportFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-weekly-report"
      CodeUri: ./src/WeeklyReport
      Handler: lambda_function.lambda_handler
      Policies:
        - AmazonDynamoDBFullAccess
        - Statement:
            - Effect: Allow
              Action:
                - ses:SendRawEmail
                - ses:SendEmail
              Resource: "*"
      Description: "Manages weekly-report operations"
      Layers:
        - !Ref CommonLayer
      Events:
        ProcWeeklyReport:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /weekly-report
            Method: ANY
            Auth:
              Authorizer: CognitoAuthorizer
        GetReportStatus:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /weekly-report/status
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        GetStatsData:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /weekly-report/stats
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        GetExportData:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /weekly-report/export
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        SubmitFeedback:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /weekly-report/feedback
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  SESFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-ses"
      CodeUri: ./src/SES
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - ses:GetIdentityVerificationAttributes
                - ses:VerifyEmailIdentity
              Resource: "*"
      Description: "Manages Amazon SES email verification processes and identity checks for the application's email functionality"
      Layers:
        - !Ref CommonLayer
      Events:
        CheckEmailApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /ses/check
            Method: ANY
            Auth:
              Authorizer: CognitoAuthorizer
        VerifyEmailApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /ses/verify
            Method: ANY
            Auth:
              Authorizer: CognitoAuthorizer

  ScheduleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-schedule"
      CodeUri: ./src/Schedule
      Policies:
        - AmazonDynamoDBFullAccess
        - LambdaInvokePolicy:
            FunctionName: !Sub "${Stage}-send-request"
      Description: "Executes scheduled tasks for weekly report reminders and automated email triggers on an hourly basis"
      Environment:
        Variables:
          STAGE: !Ref Stage
      Layers:
        - !Ref CommonLayer
      Events:
        HourlySchedule:
          Type: Schedule
          Properties:
            Name: !Sub "${Stage}-wrs-mail-trigger"
            Description: "Trigger ScheduleFunction every hour"
            Schedule: "cron(0 * * * ? *)"
            Enabled: true

  SendRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-send-request"
      CodeUri: ./src/SendRequest
      Policies:
        - AmazonDynamoDBFullAccess
        - Statement:
            - Effect: Allow
              Action:
                - ses:SendRawEmail
                - ses:SendEmail
              Resource: "*"
      Description: "Handles the sending of automated requests and notifications"
      Environment:
        Variables:
          STAGE: !Ref Stage
      Layers:
        - !Ref CommonLayer
      Events:
        SendRequestPost:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /send-request
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  SecureParameterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-secure-parameter"
      CodeUri: ./src/SecureParameter
      Environment:
        Variables:
          JWT_SECRET_PARAMETER: !Ref JwtSecretParameter
      Layers:
        - !Ref CommonLayer
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: !Ref JwtSecretParameter
        - SecretsManagerReadWrite
        - Statement:
            - Effect: Allow
              Action:
                - ssm:PutParameter
                - ssm:GetParameter
                - ssm:GetParameters
                - ssm:DeleteParameter
              Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/weekly-report/${Stage}/*"
      Description: "Manages secure parameter operations including JWT token generation and verification"
      Events:
        GenerateTokenApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /secure/generate
            Method: ANY
            Auth:
              Authorizer: CognitoAuthorizer
        VerifyTokenApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /secure/verify
            Method: ANY

  UserTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-user-tasks"
      CodeUri: ./src/UserTasks
      Policies:
        - AmazonDynamoDBFullAccess
      Description: "Manages user-specific tasks and task-related operations"
      Environment:
        Variables:
          STAGE: !Ref Stage
      Layers:
        - !Ref CommonLayer
      Events:
        ProcUserTasks:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /user-tasks
            Method: ANY
            Auth:
              Authorizer: CognitoAuthorizer

  PaymentFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-payment"
      CodeUri: ./src/Payment
      Description: "Manages payment and subscription operations using Stripe"
      Environment:
        Variables:
          STAGE: !Ref Stage
          STRIPE_SECRET_KEY: !Ref StripeSecretKey # SSMの参照から直接パラメータ参照に変更
      Layers:
        - !Ref CommonLayer
      Events:
        CreateSubscription:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /payment/create-subscription
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
        UpdateSubscription:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /payment/update-subscription
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
        ChangePlan:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /payment/change-plan
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
        PaymentMethods:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /payment/payment-methods
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  # ------------------------------------------------------------#
  #  Lambda Layer
  # ------------------------------------------------------------#
  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: common functions
      ContentUri: ./src/layer
      CompatibleRuntimes:
        - python3.12
      RetentionPolicy: "Delete"
    Metadata:
      BuildMethod: python3.12

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL for Secure Parameter API"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
