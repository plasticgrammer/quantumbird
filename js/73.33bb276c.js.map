{"version":3,"file":"js/73.33bb276c.js","mappings":"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","sources":["webpack://weekly-report/./node_modules/@stripe/stripe-js/dist/index.mjs","webpack://weekly-report/./src/composables/useStripe.js","webpack://weekly-report/./src/components/PaymentMethodForm.vue","webpack://weekly-report/./src/components/PaymentMethodForm.vue?aa8d","webpack://weekly-report/./src/components/PaymentDialog.vue","webpack://weekly-report/./src/components/PaymentDialog.vue?4cdc","webpack://weekly-report/./src/views/Billing.vue","webpack://weekly-report/./src/views/Billing.vue?5d93"],"sourcesContent":["var V3_URL = 'https://js.stripe.com/v3';\nvar V3_URL_REGEX = /^https:\\/\\/js\\.stripe\\.com\\/v3\\/?(\\?.*)?$/;\nvar EXISTING_SCRIPT_MESSAGE = 'loadStripe.setLoadParameters was called but an existing Stripe.js script already exists in the document; existing script parameters will be used';\nvar findScript = function findScript() {\n  var scripts = document.querySelectorAll(\"script[src^=\\\"\".concat(V3_URL, \"\\\"]\"));\n\n  for (var i = 0; i < scripts.length; i++) {\n    var script = scripts[i];\n\n    if (!V3_URL_REGEX.test(script.src)) {\n      continue;\n    }\n\n    return script;\n  }\n\n  return null;\n};\n\nvar injectScript = function injectScript(params) {\n  var queryString = params && !params.advancedFraudSignals ? '?advancedFraudSignals=false' : '';\n  var script = document.createElement('script');\n  script.src = \"\".concat(V3_URL).concat(queryString);\n  var headOrBody = document.head || document.body;\n\n  if (!headOrBody) {\n    throw new Error('Expected document.body not to be null. Stripe.js requires a <body> element.');\n  }\n\n  headOrBody.appendChild(script);\n  return script;\n};\n\nvar registerWrapper = function registerWrapper(stripe, startTime) {\n  if (!stripe || !stripe._registerWrapper) {\n    return;\n  }\n\n  stripe._registerWrapper({\n    name: 'stripe-js',\n    version: \"4.8.0\",\n    startTime: startTime\n  });\n};\n\nvar stripePromise = null;\nvar onErrorListener = null;\nvar onLoadListener = null;\n\nvar onError = function onError(reject) {\n  return function () {\n    reject(new Error('Failed to load Stripe.js'));\n  };\n};\n\nvar onLoad = function onLoad(resolve, reject) {\n  return function () {\n    if (window.Stripe) {\n      resolve(window.Stripe);\n    } else {\n      reject(new Error('Stripe.js not available'));\n    }\n  };\n};\n\nvar loadScript = function loadScript(params) {\n  // Ensure that we only attempt to load Stripe.js at most once\n  if (stripePromise !== null) {\n    return stripePromise;\n  }\n\n  stripePromise = new Promise(function (resolve, reject) {\n    if (typeof window === 'undefined' || typeof document === 'undefined') {\n      // Resolve to null when imported server side. This makes the module\n      // safe to import in an isomorphic code base.\n      resolve(null);\n      return;\n    }\n\n    if (window.Stripe && params) {\n      console.warn(EXISTING_SCRIPT_MESSAGE);\n    }\n\n    if (window.Stripe) {\n      resolve(window.Stripe);\n      return;\n    }\n\n    try {\n      var script = findScript();\n\n      if (script && params) {\n        console.warn(EXISTING_SCRIPT_MESSAGE);\n      } else if (!script) {\n        script = injectScript(params);\n      } else if (script && onLoadListener !== null && onErrorListener !== null) {\n        var _script$parentNode;\n\n        // remove event listeners\n        script.removeEventListener('load', onLoadListener);\n        script.removeEventListener('error', onErrorListener); // if script exists, but we are reloading due to an error,\n        // reload script to trigger 'load' event\n\n        (_script$parentNode = script.parentNode) === null || _script$parentNode === void 0 ? void 0 : _script$parentNode.removeChild(script);\n        script = injectScript(params);\n      }\n\n      onLoadListener = onLoad(resolve, reject);\n      onErrorListener = onError(reject);\n      script.addEventListener('load', onLoadListener);\n      script.addEventListener('error', onErrorListener);\n    } catch (error) {\n      reject(error);\n      return;\n    }\n  }); // Resets stripePromise on error\n\n  return stripePromise[\"catch\"](function (error) {\n    stripePromise = null;\n    return Promise.reject(error);\n  });\n};\nvar initStripe = function initStripe(maybeStripe, args, startTime) {\n  if (maybeStripe === null) {\n    return null;\n  }\n\n  var stripe = maybeStripe.apply(undefined, args);\n  registerWrapper(stripe, startTime);\n  return stripe;\n}; // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nvar stripePromise$1;\nvar loadCalled = false;\n\nvar getStripePromise = function getStripePromise() {\n  if (stripePromise$1) {\n    return stripePromise$1;\n  }\n\n  stripePromise$1 = loadScript(null)[\"catch\"](function (error) {\n    // clear cache on error\n    stripePromise$1 = null;\n    return Promise.reject(error);\n  });\n  return stripePromise$1;\n}; // Execute our own script injection after a tick to give users time to do their\n// own script injection.\n\n\nPromise.resolve().then(function () {\n  return getStripePromise();\n})[\"catch\"](function (error) {\n  if (!loadCalled) {\n    console.warn(error);\n  }\n});\nvar loadStripe = function loadStripe() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  loadCalled = true;\n  var startTime = Date.now(); // if previous attempts are unsuccessful, will re-load script\n\n  return getStripePromise().then(function (maybeStripe) {\n    return initStripe(maybeStripe, args, startTime);\n  });\n};\n\nexport { loadStripe };\n","import { ref, reactive } from 'vue'\nimport { loadStripe } from '@stripe/stripe-js'\nimport { plans } from '@/config/plans'\n\nexport function useStripe() {\n  // 既存のref/reactive\n  const stripe = ref(null)\n  const elements = ref(null)\n  const cards = reactive({})\n\n  const initializeStripe = async () => {\n    try {\n      const stripeKey = process.env.VUE_APP_STRIPE_PUBLISHABLE_KEY\n      if (!stripeKey) {\n        throw new Error('Stripe public key is not set')\n      }\n\n      // すでに初期化済みの場合は既存のインスタンスを返す\n      if (stripe.value && elements.value) {\n        return { stripe: stripe.value, elements: elements.value }\n      }\n\n      stripe.value = await loadStripe(stripeKey)\n      elements.value = stripe.value.elements({\n        locale: 'ja'\n      })\n\n      // 初期化完了を確実にするため少し待機\n      await new Promise(resolve => setTimeout(resolve, 100))\n\n      return { stripe: stripe.value, elements: elements.value }\n    } catch (error) {\n      console.error('Stripe initialization error:', error)\n      throw error\n    }\n  }\n\n  const createCardElement = async (elementId) => {\n    if (!elements.value) {\n      throw new Error('Stripe Elements has not been initialized')\n    }\n\n    try {\n      // 既存のカード要素を破棄\n      if (cards[elementId]) {\n        cards[elementId].destroy()\n        delete cards[elementId]\n      }\n\n      // DOMの準備を待機\n      await new Promise(resolve => setTimeout(resolve, 100))\n\n      const mountPoint = document.getElementById(elementId)\n      if (!mountPoint) {\n        throw new Error(`Mount point #${elementId} not found`)\n      }\n\n      // カード要素の作成\n      cards[elementId] = elements.value.create('card', {\n        style: {\n          base: {\n            fontSize: '16px',\n            color: '#32325d',\n            fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n            '::placeholder': {\n              color: '#aab7c4'\n            }\n          },\n          invalid: {\n            color: '#fa755a',\n            iconColor: '#fa755a'\n          }\n        },\n        hidePostalCode: true\n      })\n\n      // マウント前に少し待機\n      await new Promise(resolve => setTimeout(resolve, 100))\n\n      // カード要素のマウント\n      cards[elementId].mount(`#${elementId}`)\n      return cards[elementId]\n    } catch (error) {\n      console.error('Card element creation error:', error)\n      throw error\n    }\n  }\n\n  const createToken = async (elementId, data) => {\n    if (!stripe.value || !cards[elementId]) {\n      throw new Error('Stripe has not been initialized')\n    }\n\n    return stripe.value.createToken(cards[elementId], data)\n  }\n\n  const destroyCardElement = (elementId) => {\n    if (cards[elementId]) {\n      cards[elementId].destroy()\n      delete cards[elementId]\n    }\n  }\n\n  const cleanup = () => {\n    // Destroy all card elements\n    Object.keys(cards).forEach(elementId => {\n      destroyCardElement(elementId)\n    })\n    // Reset the refs\n    stripe.value = null\n    elements.value = null\n  }\n\n  return {\n    // 状態\n    stripe,\n    elements,\n    cards,\n    plans,\n\n    // メソッド\n    initializeStripe,\n    createCardElement,\n    createToken,\n    destroyCardElement,\n    cleanup\n  }\n}","<template>\n  <v-form ref=\"formRef\" @submit.prevent=\"handleSubmit\">\n    <v-text-field\n      v-model=\"formData.cardName\"\n      label=\"カード名義\"\n      :rules=\"validationRules.cardName\"\n      required\n    ></v-text-field>\n\n    <!-- Stripe Elements マウントポイント -->\n    <div class=\"mt-4\">\n      <label class=\"text-subtitle-1\">カード情報</label>\n      <div\n        :id=\"elementId\"\n        class=\"mt-2 pa-4 stripe-element\"\n        style=\"min-height: 40px\"\n      ></div>\n      <div\n        v-if=\"error\"\n        class=\"error--text mt-2\"\n      >\n        {{ error }}\n      </div>\n    </div>\n\n    <!-- スロット処理の改善 -->\n    <div v-if=\"showSubmitButton\">\n      <slot name=\"submit-button\">\n        <v-btn\n          type=\"submit\"\n          color=\"primary\"\n          class=\"mt-6\"\n          block\n          size=\"large\"\n          :loading=\"loading\"\n          :disabled=\"loading\"\n          @click.prevent=\"handleSubmit\"\n        >\n          支払い方法を更新\n        </v-btn>\n      </slot>\n    </div>\n  </v-form>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted, onUnmounted, nextTick } from 'vue'\nimport { useStripe } from '@/composables/useStripe'\n\nconst props = defineProps({\n  elementId: {\n    type: String,\n    required: true\n  },\n  loading: {\n    type: Boolean,\n    default: false\n  },\n  showSubmitButton: {\n    type: Boolean,\n    default: false\n  }\n})\n\nconst emit = defineEmits(['submit', 'error'])\n\nconst formRef = ref(null)\nconst error = ref('')\nconst { initializeStripe, createCardElement, createToken, destroyCardElement } = useStripe()\n\nconst formData = reactive({\n  cardName: ''\n})\n\nconst validationRules = reactive({\n  cardName: [\n    v => !!v || 'カード名義は必須です'\n  ]\n})\n\nconst submit = async () => {\n  const form = formRef.value\n  if (!form) return null\n  \n  const { valid } = await form.validate()\n  if (!valid) return null\n\n  error.value = ''\n\n  try {\n    const { token, error: tokenError } = await createToken(props.elementId, {\n      name: formData.cardName\n    })\n\n    if (tokenError) throw new Error(tokenError.message)\n    return { token }\n    \n  } catch (err) {\n    error.value = err.message || '処理に失敗しました'\n    emit('error', error.value)\n    return null\n  }\n}\n\n// 外部からアクセスできるようにdefineExpose\ndefineExpose({\n  submit\n})\n\nconst handleSubmit = async () => {\n  const result = await submit()\n  if (result) {\n    emit('submit', { token: result.token })\n  }\n}\n\nonMounted(async () => {\n  try {\n    await nextTick()\n    const { stripe, elements } = await initializeStripe()\n    if (!stripe || !elements) {\n      throw new Error('Stripe initialization failed')\n    }\n\n    // カード要素の初期化を確実に行う\n    const card = await createCardElement(props.elementId)\n    if (!card) {\n      throw new Error('Card element creation failed')\n    }\n\n    card.on('change', (event) => {\n      if (event.error) {\n        error.value = event.error.message\n        emit('error', error.value)\n      } else {\n        error.value = ''\n      }\n    })\n\n    // フォームのリセット\n    if (formRef.value) {\n      formRef.value.reset()\n    }\n\n  } catch (err) {\n    error.value = err.message || 'カード要素の初期化に失敗しました'\n    emit('error', error.value)\n  }\n})\n\nonUnmounted(() => {\n  console.log('Cleaning up card element:', props.elementId)\n  destroyCardElement(props.elementId)\n})\n</script>\n\n<style scoped>\n.stripe-element {\n  min-height: 40px;\n  background-color: white;\n}\n\n.stripe-element:empty {\n  background-color: white;\n}\n</style>\n","import script from \"./PaymentMethodForm.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./PaymentMethodForm.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./PaymentMethodForm.vue?vue&type=style&index=0&id=20bab69e&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-20bab69e\"]])\n\nexport default __exports__","<template>\n  <v-dialog v-model=\"isOpen\" max-width=\"960px\">\n    <v-card rounded=\"lg\">\n      <v-card-title class=\"pb-2\">\n        <v-icon class=\"mr-2\">mdi-wallet-membership</v-icon>\n        プラン変更\n        <v-btn\n          icon=\"mdi-close\"\n          variant=\"text\"\n          size=\"small\"\n          class=\"float-right\"\n          @click=\"closeDialog\"\n        ></v-btn>\n      </v-card-title>\n      <v-card-text>\n        <!-- プラン選択カード -->\n        <div v-if=\"currentStep === 'plan-selection'\" class=\"px-4 py-0\">\n          <v-row justify=\"center\">\n            <v-col\n              v-for=\"plan in plans\"\n              :key=\"plan.planId\"\n              cols=\"12\"\n              md=\"4\"\n              class=\"pa-3\"\n            >\n              <v-card\n                :color=\"getCardColor(plan)\"\n                :class=\"[\n                  'plan-card',\n                  formState.selectedPlan === plan.planId ? 'selected-plan' : '',\n                  currentPlan?.planId === plan.planId ? 'current-plan' : ''\n                ]\"\n                class=\"rounded-lg cursor-pointer position-relative\"\n                elevation=\"4\"\n                @click=\"formState.selectedPlan = plan.planId\"\n              >\n                <div style=\"min-height:30px\">\n                  <!-- 現在のプランバッジ -->\n                  <v-chip\n                    v-if=\"currentPlan?.planId === plan.planId\"\n                    :color=\"formState.selectedPlan === plan.planId ? 'white' : 'info'\"\n                    class=\"current-plan-badge font-weight-bold\"\n                    size=\"small\"\n                    label\n                  >\n                    現在のプラン\n                  </v-chip>\n                </div>\n\n                <!-- 既存のカード内容 -->\n                <v-card-title class=\"text-center pt-2\">\n                  <div class=\"text-h6 font-weight-bold\">{{ plan.name }}</div>\n                </v-card-title>\n\n                <v-card-text>\n                  <div class=\"text-h4 font-weight-bold mb-2 text-center\" style=\"min-height:130px\">\n                    <div>\n                      ¥{{ plan.price.toLocaleString() }}<span class=\"text-body-1\">/月</span>\n                    </div>\n                    <template v-if=\"plan.planId === 'business'\">\n                      <div class=\"text-body-1 mb-2\">\n                        <div v-for=\"(line, index) in plan.priceDescription\" :key=\"index\" class=\"price-line\">\n                          {{ line }}\n                        </div>\n                      </div>\n                      <div class=\"text-subtitle-1 font-weight-regular\">\n                        アカウント数: {{ formState.accountCount }}\n                      </div>\n                      <div class=\"text-h6 mt-2\">\n                        合計: ¥{{ plan.getPrice(formState.accountCount).toLocaleString() }}<span class=\"text-body-1\">/月</span>\n                      </div>\n                    </template>\n                  </div>\n                  <v-divider class=\"mb-4\"></v-divider>\n                  <v-list\n                    class=\"bg-transparent\"\n                    density=\"compact\"\n                  >\n                    <v-list-item\n                      v-for=\"(feature, index) in plan.features\"\n                      :key=\"index\"\n                      :class=\"formState.selectedPlan === plan.planId ? 'text-white' : ''\"\n                      class=\"pr-0\"\n                    >\n                      <template #prepend>\n                        <v-icon\n                          :color=\"formState.selectedPlan === plan.planId ? 'white' : 'primary'\"\n                          size=\"small\"\n                        >\n                          mdi-check-circle\n                        </v-icon>\n                      </template>\n                      {{ feature }}\n                    </v-list-item>\n                  </v-list>\n                </v-card-text>\n              </v-card>\n            </v-col>\n          </v-row>\n          \n          <v-alert\n            v-if=\"validationMessage\"\n            type=\"error\"\n            class=\"mt-4 white-space-pre-line\"\n            variant=\"tonal\"\n          >\n            {{ validationMessage }}\n          </v-alert>\n          \n          <v-row justify=\"center\" class=\"mt-5 mb-1\">\n            <v-col cols=\"12\" sm=\"8\" md=\"6\">\n              <v-btn\n                v-if=\"formState.selectedPlan\"\n                color=\"primary\"\n                block\n                :loading=\"initializingPayment\"\n                :disabled=\"initializingPayment || !isValidPlanChange || memberCountExceedsLimit\"\n                @click=\"handlePlanSelection\"\n              >\n                {{ initializingPayment ? '読み込み中...' : '次へ' }}\n              </v-btn>\n            </v-col>\n          </v-row>\n        </div>\n\n        <!-- 支払い情報フォーム -->\n        <template v-if=\"currentStep === 'payment'\">\n          <v-card-text class=\"px-6 pb-4\">\n            <!-- 変更内容カード -->\n            <v-card class=\"mb-4 pa-4\" variant=\"outlined\">\n              <div class=\"text-subtitle-1 mb-2\">変更内容</div>\n              <div class=\"mb-2\">\n                現在のプラン: {{ currentPlan?.name || 'なし' }}\n                <template v-if=\"currentPlan?.planId === 'business'\">\n                  <div class=\"mt-1 ml-2\">\n                    現在のアカウント数: {{ currentPlan.currentAccountCount }}\n                    <div>現在の月額料金: ¥{{ currentPlan.getPrice(currentPlan.currentAccountCount).toLocaleString() }}/月</div>\n                  </div>\n                </template>\n                <template v-else-if=\"currentPlan?.planId === 'pro'\">\n                  <div class=\"mt-1 ml-2\">\n                    現在の月額料金: ¥{{ currentPlan.price.toLocaleString() }}/月\n                  </div>\n                </template>\n              </div>\n              <v-divider class=\"my-3\"></v-divider>\n              <div>\n                <v-row>\n                  <v-col cols=\"6\">\n                    変更後のプラン: {{ plans.find(p => p.planId === formState.selectedPlan)?.name }}\n                    <template v-if=\"formState.selectedPlan === 'business'\">\n                      <v-text-field\n                        v-model=\"formState.accountCount\"\n                        type=\"number\"\n                        label=\"アカウント数\"\n                        class=\"mt-3 mb-2 ml-2\"\n                        :rules=\"validationRules.accountCount\"\n                        hide-details=\"auto\"\n                        density=\"compact\"\n                        variant=\"outlined\"\n                        max-width=\"130px\"\n                        required\n                      ></v-text-field>\n                      \n                      <div class=\"ml-2\">\n                        変更後の月額料金: ¥{{ plans.find(p => p.planId === 'business').getPrice(formState.accountCount).toLocaleString() }}/月\n                      </div>\n                    </template>\n                    <template v-if=\"formState.selectedPlan === 'pro'\">\n                      <div class=\"mt-1 ml-2\">\n                        変更後の月額料金: ¥{{ plans.find(p => p.planId === 'pro').price.toLocaleString() }}/月\n                      </div>\n                    </template>\n                  </v-col>\n                  <v-col cols=\"6\">\n                    <v-alert\n                      type=\"warning\"\n                      class=\"my-2\"\n                      variant=\"tonal\"\n                      density=\"compact\"\n                    >\n                      <ul class=\"mb-0\">\n                        <li v-if=\"formState.selectedPlan !== 'free'\">プラン料金は毎月自動で請求されます</li>\n                        <li>プラン変更は即時適用されます</li>\n                      </ul>\n                    </v-alert>\n                  </v-col>\n                </v-row>\n              </div>\n            </v-card>\n\n            <!-- 支払い方法セクション -->\n            <template v-if=\"formState.selectedPlan === 'pro' || formState.selectedPlan === 'business'\">\n              <v-card class=\"mb-4 pa-4\" variant=\"outlined\">\n                <h3 class=\"text-h6 mb-4\">支払い方法</h3>\n\n                <v-alert\n                  type=\"info\"\n                  icon=\"mdi-shield-check\"\n                  class=\"mb-4\"\n                  variant=\"tonal\"\n                  border=\"start\"\n                >\n                  <div class=\"d-flex align-center\">\n                    <div>\n                      <div class=\"font-weight-bold mb-1\">安全な決済処理</div>\n                      <div class=\"text-body-2\">\n                        決済処理は<a href=\"https://stripe.com/jp\" target=\"_blank\" rel=\"noopener\" class=\"text-indigo\">Stripe</a>を利用しています。<br>\n                        カード情報は暗号化され、Stripeの安全な環境で処理されます。当サービスではカード情報を保持しません。<br>\n                        詳細は<a\n                          :href=\"specifiedCommercialTransactionsUrl\"\n                          target=\"_blank\"\n                          rel=\"noopener\"\n                          class=\"text-indigo\"\n                        >特定商取引法に基づく表記</a>をご確認ください。\n                      </div>\n                    </div>\n                  </div>\n                </v-alert>\n                \n                <!-- 新規支払い方法入力フォーム -->\n                <template v-if=\"!currentPaymentMethod\">\n                  <PaymentMethodForm\n                    ref=\"paymentFormRef\"\n                    :element-id=\"'payment-form'\"\n                    :loading=\"isLoading\"\n                    :show-submit-button=\"false\"\n                    @error=\"errorMessage = $event\"\n                  />\n                </template>\n\n                <!-- 支払い方法更新フォーム -->\n                <template v-else-if=\"isPaymentMethodUpdateMode\">\n                  <PaymentMethodForm\n                    ref=\"updateFormRef\"\n                    :key=\"'payment-update-' + Date.now()\"\n                    element-id=\"payment-update\"\n                    :loading=\"isUpdatingPayment\"\n                    :show-submit-button=\"true\"\n                    @submit=\"handleUpdateSubmit($event)\"\n                    @error=\"errorMessage = $event\"\n                  >\n                    <template #submit-button>\n                      <div class=\"d-flex gap-2 pt-2\">\n                        <v-btn\n                          color=\"primary\"\n                          type=\"submit\"\n                          :loading=\"isUpdatingPayment\"\n                        >\n                          支払い方法を更新\n                        </v-btn>\n                        <span class=\"mx-2\"></span>\n                        <v-btn\n                          variant=\"outlined\"\n                          @click=\"isPaymentMethodUpdateMode = false\"\n                        >\n                          キャンセル\n                        </v-btn>\n                      </div>\n                    </template>\n                  </PaymentMethodForm>\n                </template>\n\n                <!-- 現在の支払い方法表示 -->\n                <template v-else>\n                  <div class=\"mb-4\">\n                    <div class=\"d-flex align-center justify-space-between\">\n                      <div class=\"d-flex align-center\">\n                        <v-icon class=\"mr-2\">mdi-credit-card</v-icon>\n                        <span>**** **** **** {{ currentPaymentMethod.last4 }}</span>\n                        <span class=\"ml-2 text-caption\">\n                          有効期限: {{ String(currentPaymentMethod.expMonth).padStart(2, '0') }}/{{ String(currentPaymentMethod.expYear).slice(-2) }}\n                        </span>\n                      </div>\n                      <v-btn\n                        variant=\"text\"\n                        color=\"primary\"\n                        @click=\"isPaymentMethodUpdateMode = true\"\n                      >\n                        支払い方法を変更\n                      </v-btn>\n                    </div>\n                  </div>\n                </template>\n              </v-card>\n            </template>\n\n            <!-- プラン変更確認ボタン - 支払い方法更新モード時は非表示 -->\n            <v-btn\n              v-if=\"!isPaymentMethodUpdateMode\"\n              color=\"primary\"\n              block\n              size=\"large\"\n              :loading=\"isLoading\"\n              :disabled=\"isLoading || !formState.selectedPlan || memberCountExceedsLimit\"\n              @click.prevent=\"handleSubmit\"\n            >\n              {{ isLoading ? '処理中...' : formState.selectedPlan === 'free' ? 'プランを解約する' : 'プランを変更する' }}\n            </v-btn>\n          </v-card-text>\n\n          <v-card-text class=\"px-6 pt-4\">\n            <v-btn\n              variant=\"outlined\"\n              @click=\"currentStep = 'plan-selection'\"\n            >\n              プラン選択に戻る\n            </v-btn>\n          </v-card-text>\n        </template>\n\n        <!-- 完了ダイアログ -->\n        <v-dialog v-model=\"showSuccessDialog\" max-width=\"400\">\n          <v-card rounded=\"lg\">\n            <v-card-title class=\"text-h6\">プラン変更完了</v-card-title>\n            <v-card-text>\n              <div class=\"my-2\">\n                {{ dialogMessage || '以下の内容でプランを変更しました。' }}\n              </div>\n              <v-card variant=\"outlined\" class=\"pa-3\">\n                <div class=\"text-subtitle-1 font-weight-bold mb-2\">\n                  {{ plans.find(p => p.planId === formState.selectedPlan)?.name }}\n                </div>\n                <template v-if=\"formState.selectedPlan === 'business'\">\n                  <div class=\"text-body-1\">\n                    アカウント数: {{ formState.accountCount }}\n                  </div>\n                  <div class=\"text-body-1\">\n                    月額料金: ¥{{ plans.find(p => p.planId === 'business').getPrice(formState.accountCount).toLocaleString() }}/月\n                  </div>\n                </template>\n                <template v-else-if=\"formState.selectedPlan === 'pro'\">\n                  <div class=\"text-body-1\">\n                    月額料金: ¥{{ plans.find(p => p.planId === 'pro').price.toLocaleString() }}/月\n                  </div>\n                </template>\n                <template v-else>\n                  <div class=\"text-body-1\">\n                    無料\n                  </div>\n                </template>\n              </v-card>\n            </v-card-text>\n            <v-card-actions>\n              <v-spacer></v-spacer>\n              <v-btn\n                color=\"primary\"\n                text\n                @click=\"closeDialog\"\n              >\n                閉じる\n              </v-btn>\n            </v-card-actions>\n          </v-card>\n        </v-dialog>\n      </v-card-text>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script setup>\nimport { ref, inject, nextTick, reactive, onMounted, onUnmounted, computed } from 'vue'\nimport { useStore } from 'vuex'\nimport { useStripe } from '@/composables/useStripe'\nimport { specifiedCommercialTransactionsUrl } from '@/config/environment'\nimport { getCurrentPlan, getCurrentSubscription } from '@/config/plans'\nimport { createSubscription, getPaymentMethods, changePlan, updatePaymentMethod } from '@/services/paymentService'\nimport { getAccounts } from '@/services/accountService'\nimport { getOrganization } from '@/services/organizationService'\nimport PaymentMethodForm from './PaymentMethodForm.vue'\n\nconst props = defineProps({\n  modelValue: {\n    type: Boolean,\n    required: true\n  }\n})\n\nconst emit = defineEmits(['update:modelValue', 'payment-success'])\n\nconst isOpen = computed({\n  get: () => props.modelValue,\n  set: (value) => emit('update:modelValue', value)\n})\n\nconst closeDialog = () => {\n  showSuccessDialog.value = false\n  isOpen.value = false\n}\n\nconst store = useStore()\nconst { initializeStripe, cleanup, plans } = useStripe()\nconst paymentFormRef = ref(null)\nconst showNotification = inject('showNotification')\nconst showError = inject('showError')\n\n// States\nconst formState = reactive({\n  cardName: '',\n  selectedPlan: null,\n  accountCount: 1,\n  validation: {\n    accountCount: []\n  }\n})\n\nconst validationRules = {\n  accountCount: [\n    v => !!v || 'アカウント数は必須です',\n    v => v > 0 || 'アカウント数は1以上を指定してください',\n    v => Number.isInteger(Number(v)) || '整数を入力してください'\n  ]\n}\n\nconst currentPaymentMethod = ref(null)\nconst isLoading = ref(false)\nconst errorMessage = ref('')\nconst showSuccessDialog = ref(false)\nconst isUpdatingPayment = ref(false)\nconst isPaymentMethodUpdateMode = ref(false)\nconst currentStep = ref('plan-selection')\nconst abortController = new AbortController()\nconst initializingPayment = ref(false)\nconst dialogMessage = ref('')\nconst organization = ref(null)\nconst childAccountCount = ref(0)\n\n// Computed Properties\nconst currentPlan = computed(() => {\n  const plan = getCurrentPlan()\n  const subscription = getCurrentSubscription()\n  if (!subscription) return plan\n  \n  return {\n    ...plan,\n    subscriptionId: subscription.subscriptionId || null,\n    currentAccountCount: subscription.accountCount || 0,\n    stripeCustomerId: subscription.stripeCustomerId\n  }\n})\n\nconst getCardColor = (plan) => {\n  if (formState.selectedPlan === plan.planId) {\n    return 'indigo-lighten-1'\n  } else if (currentPlan.value?.planId === plan.planId) {\n    return 'indigo-lighten-5'\n  }\n  return ''\n}\n\nconst handleError = (error) => {\n  console.error('Error:', error)\n  // エラーメッセージを直接表示\n  showError(error.message || 'エラーが発生しました')\n}\n\nconst resetForm = () => {\n  formState.cardName = ''\n  errorMessage.value = ''\n}\n\nconst handlePaymentSubmit = async ({ token }) => {\n  try {\n    const selectedPlan = plans.find(p => p.planId === formState.selectedPlan)\n    const userEmail = store.state.auth.user.email\n    \n    const response = await createSubscription({\n      email: userEmail,\n      token: token.id,\n      priceId: selectedPlan.priceId,\n      accountCount: formState.selectedPlan === 'business' ? formState.accountCount : 0\n    })\n\n    // サブスクリプション情報をより完全な形で更新\n    await store.dispatch('auth/updateSubscriptionAttributes', {\n      stripeCustomerId: response.subscription.stripeCustomerId,\n      planId: formState.selectedPlan,\n      accountCount: formState.selectedPlan === 'business' ? formState.accountCount : null,\n      subscriptionId: response.subscription.id\n    })\n\n    handleSuccess()\n  } catch (err) {\n    handleError(err)\n  }\n}\n\nconst handleSuccess = async () => {\n  dialogMessage.value = ''\n  resetForm()\n  currentStep.value = 'plan-selection'\n  emit('payment-success')\n  showSuccessDialog.value = true\n}\n\nconst fetchPaymentMethods = async () => {\n  try {\n    if (!currentPlan.value?.stripeCustomerId) {\n      console.log('No customer ID available')\n      return\n    }\n\n    const user = store.state.auth.user\n    if (!user) return\n\n    console.log('Fetching payment methods...')\n    const response = await getPaymentMethods(user.email)\n\n    // レスポンスの検証\n    if (!response?.data?.paymentMethods?.length) {\n      console.log('No payment methods found')\n      currentPaymentMethod.value = null\n      return\n    }\n\n    const [latestMethod] = response.data.paymentMethods\n    \n    // 現在の値と新しい値を比較\n    const isChanged = !currentPaymentMethod.value || \n                     currentPaymentMethod.value.last4 !== latestMethod.last4 ||\n                     currentPaymentMethod.value.expMonth !== latestMethod.expMonth ||\n                     currentPaymentMethod.value.expYear !== latestMethod.expYear\n\n    if (isChanged) {\n      currentPaymentMethod.value = {\n        last4: latestMethod.last4,\n        expMonth: latestMethod.expMonth,\n        expYear: latestMethod.expYear\n      }\n      console.log('Payment method updated:', currentPaymentMethod.value)\n    }\n\n  } catch (error) {\n    if (error.name !== 'AbortError') {\n      console.error('Error fetching payment methods:', error)\n      currentPaymentMethod.value = null\n      throw error\n    }\n  }\n}\n\nconst handlePlanSelection = async () => {\n  try {\n    initializingPayment.value = true\n    isPaymentMethodUpdateMode.value = false\n    await fetchPaymentMethods()\n    currentStep.value = 'payment'\n  } catch (error) {\n    showError('支払い情報の取得に失敗しました')\n    currentStep.value = 'plan-selection'\n  } finally {\n    initializingPayment.value = false\n  }\n}\n\nconst handlePaymentMethodOnlyUpdate = async ({ token }) => {\n  try {\n    isUpdatingPayment.value = true\n    errorMessage.value = ''\n\n    if (!currentPlan.value?.stripeCustomerId) {\n      throw new Error('顧客情報が見つかりません')\n    }\n\n    if (!token?.id) {\n      throw new Error('カード情報が不正です')\n    }\n\n    const response = await updatePaymentMethod({\n      token: token.id,\n      customerId: currentPlan.value.stripeCustomerId\n    })\n\n    if (!response?.paymentMethod) {\n      throw new Error('カード情報の更新に失敗しました')\n    }\n\n    // 更新後のカード情報を即時反映\n    currentPaymentMethod.value = {\n      last4: response.paymentMethod.last4,\n      expMonth: response.paymentMethod.expMonth,\n      expYear: response.paymentMethod.expYear\n    }\n\n    // 支払い方法更新モードを終了\n    isPaymentMethodUpdateMode.value = false\n    showNotification('支払い方法を更新しました', 'success')\n\n  } catch (err) {\n    console.error('Payment method update error:', err)\n    showError(err.message || '支払い方法の更新に失敗しました')\n  } finally {\n    isUpdatingPayment.value = false\n  }\n}\n\nconst validateForm = () => {\n  console.log('Validating form:', {\n    selectedPlan: formState.selectedPlan,\n    accountCount: formState.accountCount,\n    currentPlanId: currentPlan.value?.planId,\n    currentAccountCount: currentPlan.value?.currentAccountCount\n  })\n\n  const errors = []\n  if (memberCountExceedsLimit.value) {\n    errors.push(validationMessage.value)\n  }\n  if (formState.selectedPlan === 'business' && (!formState.accountCount || formState.accountCount < 1)) {\n    errors.push('アカウント数は1以上を指定してください')\n  }\n  // 同じプランへの変更チェックを削除（必要に応じて）\n  return errors\n}\n\nconst handlePlanChange = async (params) => {\n  try {\n    isLoading.value = true\n    errorMessage.value = ''\n    dialogMessage.value = ''\n\n    // ビジネスプラン内でのアカウント数変更時は特別な処理\n    const isBusinessAccountUpdate = \n      currentPlan.value?.planId === 'business' && \n      params.priceId === plans.find(p => p.planId === 'business').priceId\n\n    const changeParams = {\n      ...params,\n      // ビジネスプラン内でのアカウント数変更時はプロレーションを無効化\n      proration_behavior: isBusinessAccountUpdate ? 'none' : 'create_prorations',\n      payment_behavior: 'default_incomplete',\n      collection_method: 'charge_automatically',\n      billing_cycle_anchor: isBusinessAccountUpdate ? 'unchanged' : 'now'\n    }\n\n    const response = await changePlan(changeParams)\n    \n    if (response.message) {\n      if (response.subscription?.cancelAt) {\n        showSuccessDialog.value = true\n        dialogMessage.value = response.message\n      } else {\n        await store.dispatch('auth/updateSubscriptionAttributes', {\n          planId: formState.selectedPlan,\n          accountCount: formState.selectedPlan === 'business' ? formState.accountCount : null,\n          stripeCustomerId: response.subscription.stripeCustomerId\n        })\n        handleSuccess()\n      }\n    }\n\n    return true\n  } catch (err) {\n    handleError(err)\n    return false\n  } finally {\n    isLoading.value = false\n  }\n}\n\nconst handleSubmit = async () => {\n  try {\n    const errors = validateForm()\n    if (errors.length > 0) {\n      showError(errors[0])\n      return\n    }\n\n    // プラン変更時のガード追加\n    if (\n      formState.selectedPlan === currentPlan.value?.planId && \n      formState.selectedPlan !== 'business' && \n      !isPaymentMethodUpdateMode.value\n    ) {\n      showError('同じプランへの変更はできません')\n      return\n    }\n\n    const selectedPlan = plans.find(p => p.planId === formState.selectedPlan)\n    if (!selectedPlan) {\n      showError('無効なプランが選択されました')\n      return\n    }\n\n    isLoading.value = true\n\n    if (formState.selectedPlan === 'free') {\n      try {\n        const subscription = getCurrentSubscription()\n        const currentStripeCustomerId = subscription?.stripeCustomerId\n        \n        // サブスクリプションIDがある場合のみchangePlanを呼び出し\n        if (currentPlan.value?.subscriptionId) {\n          const response = await changePlan({\n            subscriptionId: currentPlan.value.subscriptionId,\n            priceId: 'price_free',\n            accountCount: 0,\n            customerId: currentStripeCustomerId\n          })\n          \n          // フリープランの情報で完全に更新（priceIdも含める）\n          await store.dispatch('auth/updateSubscriptionAttributes', {\n            planId: 'free',\n            priceId: 'price_free',\n            accountCount: null,\n            subscriptionId: null,\n            stripeCustomerId: response.subscription.stripeCustomerId || currentStripeCustomerId\n          })\n          \n          if (response.message) {\n            dialogMessage.value = response.message\n          }\n          handleSuccess()\n        } else {\n          // フリープランへの直接変更\n          await store.dispatch('auth/updateSubscriptionAttributes', {\n            planId: 'free',\n            priceId: 'price_free',\n            accountCount: null,\n            subscriptionId: null,\n            stripeCustomerId: currentStripeCustomerId\n          })\n          handleSuccess()\n        }\n      } catch (err) {\n        handleError(err)\n      }\n    } else {\n      // フリープランからの変更時は常に新規サブスクリプション作成\n      const subscription = getCurrentSubscription()\n      const isFromFreePlan = !subscription?.subscriptionId || subscription?.planId === 'free'\n      \n      if (isFromFreePlan) {\n        console.log('Creating new subscription...')\n        // 支払い方法が必要な場合は新規作成\n        if (!currentPaymentMethod.value) {\n          console.log('Submitting new payment method...')\n          const result = await paymentFormRef.value?.submit()\n          if (!result?.token) {\n            console.log('No token received')\n            return\n          }\n          console.log('Creating subscription with new payment method...')\n          await handlePaymentSubmit({ token: result.token })\n        } else {\n          // 既存の支払い方法があれば再利用\n          console.log('Creating subscription with existing payment method...')\n          const response = await createSubscription({\n            email: store.state.auth.user.email,\n            token: null, // 既存の支払い方法を使用\n            priceId: selectedPlan.priceId,\n            accountCount: formState.selectedPlan === 'business' ? formState.accountCount : 0,\n            customerId: getCurrentSubscription()?.stripeCustomerId\n          })\n          \n          if (response.subscription) {\n            await store.dispatch('auth/updateSubscriptionAttributes', {\n              stripeCustomerId: response.subscription.stripeCustomerId\n            })\n            handleSuccess()\n          }\n        }\n      } else {\n        // 既存のサブスクリプションがある場合のみプラン変更\n        console.log('Changing existing subscription...')\n        await handlePlanChange({\n          subscriptionId: currentPlan.value.subscriptionId,\n          priceId: selectedPlan.priceId,\n          accountCount: formState.selectedPlan === 'business' ? formState.accountCount : 0\n        })\n      }\n    }\n  } catch (err) {\n    console.error('Submit error:', err)\n    showError(err.message || '処理に失敗しました')\n  } finally {\n    isLoading.value = false\n  }\n}\n\nconst isValidPlanChange = computed(() => {\n  // フリープランからフリープランへの変更は不可\n  if (formState.selectedPlan === 'free' && currentPlan.value?.planId === 'free') {\n    return false\n  }\n  return true\n})\n\nconst currentMemberCount = computed(() => {\n  return organization.value?.members?.length || 0\n})\n\nconst memberCountExceedsLimit = computed(() => {\n  if (!formState.selectedPlan) return false\n  \n  const selectedPlan = plans.find(p => p.planId === formState.selectedPlan)\n  \n  // プラン別のチェック\n  if (formState.selectedPlan === 'business') {\n    // ビジネスプランの場合、設定するアカウント数が現在の子アカウント数より少ない場合はエラー\n    return formState.accountCount < childAccountCount.value\n  } else {\n    // その他のプランの場合、子アカウントが存在する場合はエラー\n    const maxAccounts = selectedPlan?.adminFeatures?.accountCount || 0\n    if (childAccountCount.value > 0 && maxAccounts === 0) {\n      return true\n    }\n    \n    // メンバー数制限のチェック\n    const maxMembers = selectedPlan?.adminFeatures?.maxMembers\n    if (!maxMembers || maxMembers === -1) return false\n    return currentMemberCount.value > maxMembers\n  }\n})\n\nconst validationMessage = computed(() => {\n  if (!memberCountExceedsLimit.value) return ''\n\n  const selectedPlan = plans.find(p => p.planId === formState.selectedPlan)\n  const messages = []\n\n  // プラン別のエラーメッセージ\n  if (formState.selectedPlan === 'business') {\n    if (formState.accountCount < childAccountCount.value) {\n      messages.push(\n        `設定したいアカウント数(${formState.accountCount}個)が現在の子アカウント数(${childAccountCount.value}個)より少ないため変更できません。\\n` +\n        `${childAccountCount.value}以上のアカウント数を設定するか、子アカウントを削除してください。`\n      )\n    }\n  } else {\n    // 非ビジネスプランの場合\n    if (childAccountCount.value > 0) {\n      messages.push(\n        '選択したプランでは子アカウントを使用できません。\\n' +\n        'すべての子アカウントを削除してから再度お試しください。'\n      )\n    }\n    \n    // メンバー数制限のメッセージ\n    const maxMembers = selectedPlan.adminFeatures.maxMembers\n    if (maxMembers !== -1 && currentMemberCount.value > maxMembers) {\n      messages.push(\n        `現在のメンバー数(${currentMemberCount.value}名)が選択したプランの上限(${maxMembers}名)を超えています。\\n` +\n        'メンバーを削除してから再度お試しください。'\n      )\n    }\n  }\n\n  return messages.join('\\n\\n')\n})\n\nconst handleUpdateSubmit = async ({ token }) => {\n  if (token) {\n    await handlePaymentMethodOnlyUpdate({ token })\n  }\n}\n\n// Lifecycle Hooks\nonMounted(async () => {\n  try {\n    await nextTick()\n    const { stripe, error } = await initializeStripe()\n    if (error || !stripe) {\n      throw new Error(error || 'Stripe initialization failed')\n    }\n\n    // 組織情報の取得を追加\n    const organizationId = store.getters['auth/organizationId']\n    const [orgResult, accountsResult] = await Promise.all([\n      getOrganization(organizationId),\n      getAccounts({ parentOrganizationId: organizationId })\n    ])\n    if (orgResult && Object.keys(orgResult).length > 0) {\n      organization.value = orgResult\n    }\n    childAccountCount.value = accountsResult?.length || 0\n\n    const user = store.state.auth.user\n    if (user) {\n      formState.email = user.email\n      // currentSubscriptionが未設定の場合はfreeプランを設定\n      formState.selectedPlan = store.getters['auth/currentSubscription']?.planId || 'free'\n    } else {\n      formState.selectedPlan = 'free'\n    }\n\n    if (currentPlan.value) {\n      formState.accountCount = currentPlan.value.planId === 'business' \n        ? currentPlan.value.currentAccountCount \n        : 1\n    }\n  } catch (error) {\n    if (!error.name === 'AbortError') {\n      handleError(error, '初期化に失敗しました')\n    }\n  }\n})\n\nonUnmounted(() => {\n  abortController.abort()\n  cleanup()\n})\n</script>\n\n<style scoped>\n.v-list-item--density-compact.v-list-item--one-line {\n  min-height: auto;\n}\n\n.plan-card {\n  height: 100%;\n  border: 1px solid currentColor;\n  transition: all 0.3s;\n  position: relative;\n}\n\n.stripe-element {\n  min-height: 40px;\n  background-color: white;\n}\n\n.stripe-element:empty {\n  background-color: white;\n}\n\n.price-line {\n  line-height: 1.6;\n}\n\n.v-list-item--density-compact.v-list-item--one-line {\n  min-height: auto;\n}\n\n.white-space-pre-line {\n  white-space: pre-line;\n}\n</style>","import script from \"./PaymentDialog.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./PaymentDialog.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./PaymentDialog.vue?vue&type=style&index=0&id=5c66966e&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-5c66966e\"]])\n\nexport default __exports__","<template>\n  <v-container>\n    <!-- 子アカウントでのメッセージ表示 -->\n    <template v-if=\"!isParentAccount\">\n      <v-row dense class=\"pb-4\">\n        <v-col>\n          <h3>\n            <v-icon size=\"large\" class=\"mr-1\">mdi-wallet-outline</v-icon>\n            支払い設定\n          </h3>\n        </v-col>\n      </v-row>\n      <v-alert\n        type=\"warning\"\n        title=\"アクセス制限\"\n        text=\"子アカウントでは支払い設定にアクセスできません。親アカウントで操作してください。\"\n      ></v-alert>\n    </template>\n\n    <template v-else>\n      <v-row ref=\"headerRef\" dense class=\"pb-4\">\n        <v-col>\n          <h3>\n            <v-icon size=\"large\" class=\"mr-1\">mdi-wallet-outline</v-icon>\n            支払い設定\n          </h3>\n        </v-col>\n      </v-row>\n\n      <!-- プラン変更ダイアログ -->\n      <PaymentDialog\n        v-model=\"showPlanSelector\"\n        @payment-success=\"handlePaymentSuccess\"\n      />\n\n      <!-- 現在のプラン情報 -->\n      <v-card ref=\"planCardRef\">\n        <v-card-title>現在のプラン</v-card-title>\n        <v-card-text>\n          <v-row align=\"center\">\n            <v-col class=\"me-auto\">\n              <div class=\"text-h6 font-weight-bold\">{{ currentPlanName }}</div>\n              <p class=\"text-body-1 mt-2 px-4\">\n                <span v-if=\"currentPlanPrice === 0\">無料</span>\n                <span v-else>{{ currentPlanPrice }}円/月</span>\n              </p>\n              <p v-if=\"currentSubscription?.accountCount > 0\" class=\"text-caption  px-4\">\n                アカウント数: {{ currentSubscription.accountCount }}\n              </p>\n              <p v-if=\"currentSubscription?.currentPeriodEnd\" class=\"text-caption px-4 text-warning\">\n                ※ {{ formatDate(currentSubscription.currentPeriodEnd) }}まで現在のプランが有効です\n              </p>\n            </v-col>\n            <v-col cols=\"12\" md=\"auto\">\n              <v-btn color=\"primary\" @click=\"handleShowPlanSelector\">\n                プランを変更\n              </v-btn>\n            </v-col>\n          </v-row>\n        </v-card-text>\n      </v-card>\n\n      <!-- 請求履歴 -->\n      <v-card class=\"mt-4\">\n        <v-card-title>請求履歴</v-card-title>\n        <v-card-text :style=\"tableStyle\">\n          <v-table v-if=\"invoices.length > 0\">\n            <thead>\n              <tr>\n                <th>日付</th>\n                <th>内容</th>\n                <th class=\"text-center\">金額</th>\n                <th class=\"text-center\">ステータス</th>\n                <th class=\"text-center\">請求書</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"invoice in invoices\" :key=\"invoice.id\">\n                <td>{{ formatDate(invoice.date) }}</td>\n                <td>\n                  <div>{{ invoice.description }}</div>\n                  <div v-if=\"invoice.upcoming\" class=\"text-caption text-warning\">\n                    ※次回請求時に反映\n                  </div>\n                </td>\n                <td :class=\"[{ 'text-error': invoice.amount < 0, 'text-warning': invoice.upcoming }, 'text-right']\">\n                  {{ formatAmount(invoice.amount) }}\n                </td>\n                <td class=\"text-center\">\n                  <v-chip\n                    :color=\"getStatusColor(invoice)\"\n                    :variant=\"invoice.upcoming ? 'outlined' : 'flat'\"\n                    size=\"small\"\n                  >\n                    {{ getStatusText(invoice) }}\n                  </v-chip>\n                </td>\n                <td class=\"text-center\">\n                  <v-btn\n                    v-if=\"invoice.url\"\n                    variant=\"text\"\n                    size=\"large\"\n                    color=\"primary\"\n                    @click=\"openInvoice(invoice.url)\"\n                  >\n                    <v-icon size=\"large\">mdi-open-in-new</v-icon>\n                  </v-btn>\n                </td>\n              </tr>\n            </tbody>\n          </v-table>\n          <div v-else class=\"text-center py-4\">\n            <p class=\"text-body-1 text-medium-emphasis\">\n              {{ isLoading ? '読み込み中...' : '請求履歴がありません' }}\n            </p>\n          </div>\n        </v-card-text>\n      </v-card>\n    </template>\n  </v-container>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, onUnmounted, nextTick } from 'vue'\nimport { useStore } from 'vuex'\nimport { useStripe } from '@/composables/useStripe'\nimport { getInvoices } from '@/services/paymentService'\nimport { updateOrganizationFeatures } from '@/services/organizationService'\nimport { getCurrentPlan, getCurrentSubscription } from '@/config/plans'\nimport PaymentDialog from '@/components/PaymentDialog.vue'\n\nconst store = useStore()\nconst { plans } = useStripe()\n\nconst isLoading = ref(false)\nconst error = ref(null)\nconst invoices = ref([])\nconst showPlanSelector = ref(false)\n\nconst currentPlan = computed(() => getCurrentPlan())\nconst currentSubscription = computed(() => getCurrentSubscription())\n\nconst currentPlanName = computed(() => currentPlan.value.name)\n\nconst currentPlanPrice = computed(() => {\n  if (currentPlan.value.planId === 'business' && currentSubscription.value?.accountCount) {\n    return currentPlan.value.getPrice(currentSubscription.value.accountCount)\n  }\n  return currentPlan.value.price\n})\n\n// ref要素の追加\nconst headerRef = ref(null)\nconst planCardRef = ref(null)\nconst tableStyle = ref({})\n\n// 高さ計算とスタイル設定\nconst calculateTableHeight = () => {\n  nextTick(() => {\n    const headerHeight = headerRef.value?.$el.offsetHeight || 0\n    const planCardHeight = planCardRef.value?.$el.offsetHeight || 0\n    const padding = 80 // コンテナのパディングなどの余白\n\n    const maxHeight = `calc(100vh - ${headerHeight + planCardHeight + padding}px)`\n    tableStyle.value = {\n      maxHeight,\n      overflowY: 'auto'\n    }\n  })\n}\n\n// マウント時とウィンドウリサイズ時に高さを再計算\nonMounted(() => {\n  calculateTableHeight()\n  window.addEventListener('resize', calculateTableHeight)\n})\n\n// コンポーネント破棄時にイベントリスナーを削除\nonUnmounted(() => {\n  window.removeEventListener('resize', calculateTableHeight)\n})\n\nconst fetchInvoices = async (customerId) => {\n  try {\n    isLoading.value = true\n    error.value = null\n    \n    // 顧客IDがあれば請求履歴を取得（stripeCustomerIdの存在チェックを削除）\n    if (customerId) {\n      const response = await getInvoices(customerId)\n      invoices.value = response.data.invoices\n    } else {\n      invoices.value = []\n    }\n  } catch (err) {\n    error.value = '請求履歴の取得に失敗しました'\n    console.error('Failed to fetch invoices:', err)\n    invoices.value = []\n  } finally {\n    isLoading.value = false\n  }\n}\n\nconst formatDate = (timestamp) => {\n  if (!timestamp) return ''\n  const date = new Date(timestamp * 1000)\n  const options = { year: 'numeric', month: '2-digit', day: '2-digit' }\n  return date.toLocaleDateString('ja-JP', options)\n}\n\nconst formatAmount = (amount) => {\n  const prefix = amount < 0 ? '-' : ''\n  return `${prefix}${Math.abs(amount).toLocaleString()}円`\n}\n\nconst getStatusColor = (invoice) => {\n  if (invoice.upcoming) return 'warning'\n  if (invoice.type === 'refund') return 'info'\n  return invoice.status === 'paid' ? 'light-blue-lighten-4' : 'warning'\n}\n\nconst getStatusText = (invoice) => {\n  if (invoice.upcoming) return '保留中'\n  if (invoice.type === 'refund') return '返金済み'\n  return invoice.status === 'paid' ? '支払い済み' : '未払い'\n}\n\nconst isParentAccount = computed(() => store.getters['auth/isParentAccount'])\n\nconst handleShowPlanSelector = async () => {\n  if (!isParentAccount.value) {\n    store.dispatch('showNotification', {\n      message: '子アカウントではプランを変更できません',\n      type: 'warning'\n    })\n    return\n  }\n  showPlanSelector.value = true\n}\n\nconst handlePaymentSuccess = async () => {\n  if (!isParentAccount.value) {\n    store.dispatch('showNotification', {\n      message: '子アカウントでは支払い設定を変更できません',\n      type: 'warning'\n    })\n    return\n  }\n\n  const organizationId = store.getters['auth/organizationId']\n\n  try {\n    const currentPlanId = currentSubscription.value?.planId || 'free'\n    const currentPlan = plans.find(p => p.planId === currentPlanId)\n    if (!currentPlan) {\n      throw new Error('Invalid plan')\n    }\n    await updateOrganizationFeatures(organizationId, currentPlan.organizationFeatures)\n    \n    if (currentSubscription.value?.stripeCustomerId) {\n      await fetchInvoices(currentSubscription.value.stripeCustomerId)\n    }\n  } catch (error) {\n    console.error('Failed to update features:', error)\n  }\n}\n\nconst openInvoice = (url) => {\n  if (url) {\n    window.open(url, '_blank')\n  }\n}\n\nonMounted(async () => {\n  if (!isParentAccount.value) {\n    return\n  }\n  \n  try {\n    // 非同期でStripe情報を取得（条件チェックを変更）\n    if (currentSubscription.value?.stripeCustomerId) {\n      await fetchInvoices(currentSubscription.value.stripeCustomerId)\n    }\n  } catch (error) {\n    console.error('Failed to initialize billing view:', error)\n  }\n})\n</script>\n\n<style>\n.text-error {\n  color: var(--v-error-base);\n}\n\n.text-warning {\n  color: var(--v-warning-base);\n}\n</style>","import script from \"./Billing.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Billing.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./Billing.vue?vue&type=style&index=0&id=7b2308d0&lang=css\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["stripePromise$1","V3_URL","V3_URL_REGEX","EXISTING_SCRIPT_MESSAGE","findScript","scripts","document","querySelectorAll","concat","i","length","script","test","src","injectScript","params","queryString","advancedFraudSignals","createElement","headOrBody","head","body","Error","appendChild","registerWrapper","stripe","startTime","_registerWrapper","name","version","stripePromise","onErrorListener","onLoadListener","onError","reject","onLoad","resolve","window","Stripe","loadScript","Promise","console","warn","_script$parentNode","removeEventListener","parentNode","removeChild","addEventListener","error","initStripe","maybeStripe","args","apply","undefined","loadCalled","getStripePromise","then","loadStripe","_len","arguments","Array","_key","Date","now","useStripe","ref","elements","cards","reactive","initializeStripe","async","stripeKey","process","value","locale","setTimeout","createCardElement","elementId","destroy","mountPoint","getElementById","create","style","base","fontSize","color","fontFamily","invalid","iconColor","hidePostalCode","mount","createToken","data","destroyCardElement","cleanup","Object","keys","forEach","plans","props","__props","emit","__emit","formRef","formData","cardName","validationRules","v","submit","form","valid","validate","token","tokenError","message","err","__expose","handleSubmit","result","onMounted","nextTick","card","on","event","reset","onUnmounted","__exports__","isOpen","computed","get","modelValue","set","closeDialog","showSuccessDialog","store","useStore","paymentFormRef","showNotification","inject","showError","formState","selectedPlan","accountCount","validation","Number","isInteger","currentPaymentMethod","isLoading","errorMessage","isUpdatingPayment","isPaymentMethodUpdateMode","currentStep","abortController","AbortController","initializingPayment","dialogMessage","organization","childAccountCount","currentPlan","plan","getCurrentPlan","subscription","getCurrentSubscription","subscriptionId","currentAccountCount","stripeCustomerId","getCardColor","planId","handleError","resetForm","handlePaymentSubmit","find","p","userEmail","state","auth","user","email","response","createSubscription","id","priceId","dispatch","handleSuccess","fetchPaymentMethods","getPaymentMethods","paymentMethods","latestMethod","isChanged","last4","expMonth","expYear","handlePlanSelection","handlePaymentMethodOnlyUpdate","updatePaymentMethod","customerId","paymentMethod","validateForm","errors","memberCountExceedsLimit","push","validationMessage","handlePlanChange","isBusinessAccountUpdate","changeParams","proration_behavior","payment_behavior","collection_method","billing_cycle_anchor","changePlan","cancelAt","currentStripeCustomerId","isFromFreePlan","isValidPlanChange","currentMemberCount","members","maxAccounts","adminFeatures","maxMembers","messages","join","handleUpdateSubmit","organizationId","getters","orgResult","accountsResult","all","getOrganization","getAccounts","parentOrganizationId","abort","invoices","showPlanSelector","currentSubscription","currentPlanName","currentPlanPrice","getPrice","price","headerRef","planCardRef","tableStyle","calculateTableHeight","headerHeight","$el","offsetHeight","planCardHeight","padding","maxHeight","overflowY","fetchInvoices","getInvoices","formatDate","timestamp","date","options","year","month","day","toLocaleDateString","formatAmount","amount","prefix","Math","abs","toLocaleString","getStatusColor","invoice","upcoming","type","status","getStatusText","isParentAccount","handleShowPlanSelector","handlePaymentSuccess","currentPlanId","updateOrganizationFeatures","organizationFeatures","openInvoice","url","open"],"sourceRoot":""}