{"version":3,"file":"js/397.5404cfaa.js","mappings":"8MAEA,MAAMA,EAAY,cAELC,EAAkBC,SACtBC,EAAAA,GAAUC,KAAKJ,EAAWK,GAGtBC,EAAkBJ,SACtBC,EAAAA,GAAUI,IAAIP,EAAWK,GAGrBG,EAAkBN,MAAOO,EAAQC,IACrCP,EAAAA,GAAUQ,OAAOX,EAAW,CAAES,SAAQC,WAWlCE,EAAgBV,SACpBC,EAAAA,GAAUU,IAAIb,EAAW,CAAES,W,2HCgCpC,MAAMK,GAAQC,EAAAA,EAAAA,MACRC,GAAQC,EAAAA,EAAAA,KAAI,MACZC,GAAQD,EAAAA,EAAAA,KAAI,IACZE,GAAeF,EAAAA,EAAAA,KAAI,IACnBG,GAAoBC,EAAAA,EAAAA,WAAS,IAAMH,EAAMI,MAAMC,MAAKC,GAAQA,EAAKC,cACjEhB,EAASK,EAAMY,QAAQ,uBAEvBC,EAAazB,UACjB,IACE,IAAKO,EAEH,OAGF,MAAMmB,QAAiBhB,EAAcH,GACjCmB,GAAYC,MAAMC,QAAQF,GAC5BV,EAAMI,MAAQM,EAEdV,EAAMI,MAAQ,EAElB,CAAE,MAAOS,GAEPb,EAAMI,MAAQ,EAChB,GAGIU,EAAuB9B,UACT,UAAd+B,EAAMC,KAAoBD,EAAME,cAClCF,EAAMG,uBACAC,IACR,EAGIA,EAAUnC,UACd,GAAIiB,EAAaG,MAAMgB,QAAU7B,EAC/B,IACE,MAAM8B,EAAU,CACdC,MAAOrB,EAAaG,MAAMgB,OAC1B7B,OAAQA,EACRgC,WAAW,IAAIC,MAAOC,cACtBlB,WAAW,GAEPG,QAAiB3B,EAAgBsC,GACvCrB,EAAMI,MAAMsB,KAAKhB,GACjBT,EAAaG,MAAQ,EACvB,CAAE,MAAON,GAET,CACF,EAGI6B,EAAuB3C,UAC3B,UACQI,EAAgB,IACjBkB,EACHC,UAAWD,EAAKC,WAEpB,CAAE,MAAOT,GAEPQ,EAAKC,WAAaD,EAAKC,SACzB,GAGIqB,EAAsB5C,UAC1B,IAAKO,EAEH,OAGF,MAAMsC,EAAiB7B,EAAMI,MAAM0B,QAAOxB,GAAQA,EAAKC,YAEvDT,EAAMM,MAAQ,KACd,UACQ2B,QAAQC,IAAIH,EAAeI,KAAI3B,GAAQhB,EAAgBC,EAAQe,EAAKd,WAC1EQ,EAAMI,MAAQJ,EAAMI,MAAM0B,QAAOxB,IAASA,EAAKC,WACjD,CAAE,MAAOM,GAET,G,OAIFqB,EAAAA,EAAAA,WAAUzB,G,g5CCpIV,MAAM0B,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://weekly-report/./src/services/userTasksService.js","webpack://weekly-report/./src/components/widget/TodoListWidget.vue","webpack://weekly-report/./src/components/widget/TodoListWidget.vue?42ad"],"sourcesContent":["import { apiClient } from './apiClient'\n\nconst BASE_PATH = '/user-tasks'\n\nexport const submitUserTasks = async (userTasks) => {\n  return apiClient.post(BASE_PATH, userTasks)\n}\n\nexport const updateUserTasks = async (userTasks) => {\n  return apiClient.put(BASE_PATH, userTasks)\n}\n\nexport const deleteUserTasks = async (userId, taskId) => {\n  return apiClient.delete(BASE_PATH, { userId, taskId })\n}\n\nexport const getUserTasks = async (userId, taskId) => {\n  try {\n    return await apiClient.get(BASE_PATH, { userId, taskId })\n  } catch (error) {\n    return null // 組織が見つからない場合はnullを返す\n  }\n}\n\nexport const listUserTasks = async (userId) => {\n  return apiClient.get(BASE_PATH, { userId })\n}","<template>\n  <BaseWidget\n    widget-id=\"todo\"\n    title=\"やることリスト\"\n    icon=\"mdi-clipboard-check-outline\"\n  >\n    <template #header-append>\n      <v-btn\n        v-if=\"hasCompletedTasks\"\n        color=\"error\"\n        size=\"small\"\n        variant=\"outlined\"\n        @click=\"clearCompletedTasks\"\n      >\n        完了済み削除\n      </v-btn>\n    </template>\n\n    <div v-if=\"tasks.length > 0\" class=\"pa-0\">\n      <v-checkbox\n        v-for=\"task in tasks\"\n        :key=\"task.taskId\"\n        v-model=\"task.completed\"\n        color=\"info\"\n        class=\"todo-item pa-0\"\n        hide-details\n        density=\"compact\"\n        @change=\"handleTaskCompletion(task)\"\n      >\n        <template #label>\n          <span :class=\"{ 'text-decoration-line-through': task.completed }\">\n            {{ task.title }}\n          </span>\n        </template>\n      </v-checkbox>\n    </div>\n    <p v-else>タスクがありません</p>\n    <v-text-field\n      v-model=\"newTaskTitle\"\n      label=\"新しいタスク\"\n      hide-details\n      single-line\n      density=\"compact\"\n      class=\"mt-2\"\n      append-inner-icon=\"mdi-plus\"\n      @click:append-inner=\"addTask\"\n      @keydown.enter=\"handleNewTaskKeydown($event)\"\n    ></v-text-field>\n  </BaseWidget>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted } from 'vue'\nimport { useStore } from 'vuex'\nimport { submitUserTasks, updateUserTasks, deleteUserTasks, listUserTasks } from '@/services/userTasksService'\nimport BaseWidget from './BaseWidget.vue'\n\nconst store = useStore()\nconst error = ref(null)\nconst tasks = ref([])\nconst newTaskTitle = ref('')\nconst hasCompletedTasks = computed(() => tasks.value.some(task => task.completed))\nconst userId = store.getters['auth/cognitoUserSub']\n\nconst fetchTasks = async () => {\n  try {\n    if (!userId) {\n      console.error('User ID is not available')\n      return\n    }\n\n    const response = await listUserTasks(userId)\n    if (response && Array.isArray(response)) {\n      tasks.value = response\n    } else {\n      tasks.value = []\n    }\n  } catch (err) {\n    console.error('タスクの取得に失敗しました:', err)\n    tasks.value = []\n  }\n}\n\nconst handleNewTaskKeydown = async (event) => {\n  if (event.key === 'Enter' && !event.isComposing) {\n    event.preventDefault()\n    await addTask()\n  }\n}\n\nconst addTask = async () => {\n  if (newTaskTitle.value.trim() && userId) {\n    try {\n      const newTask = {\n        title: newTaskTitle.value.trim(),\n        userId: userId,\n        createdAt: new Date().toISOString(),\n        completed: false\n      }\n      const response = await submitUserTasks(newTask)\n      tasks.value.push(response)\n      newTaskTitle.value = ''\n    } catch (error) {\n      console.error('タスクの追加に失敗しました:', error)\n    }\n  }\n}\n\nconst handleTaskCompletion = async (task) => {\n  try {\n    await updateUserTasks({\n      ...task,\n      completed: task.completed\n    })\n  } catch (error) {\n    console.error('タスクの更新に失敗しました:', error)\n    task.completed = !task.completed // エラーの場合、UI上で元の状態に戻す\n  }\n}\n\nconst clearCompletedTasks = async () => {\n  if (!userId) {\n    console.error('User ID is not available')\n    return\n  }\n\n  const completedTasks = tasks.value.filter(task => task.completed)\n  \n  error.value = null\n  try {\n    await Promise.all(completedTasks.map(task => deleteUserTasks(userId, task.taskId)))\n    tasks.value = tasks.value.filter(task => !task.completed)\n  } catch (err) {\n    console.error('完了済みタスクの削除に失敗しました:', err)\n  }\n}\n\n// Lifecycle hooks\nonMounted(fetchTasks)\n</script>\n\n<style scoped>\n.todo-item :deep() .v-selection-control {\n  min-height: 1.2em !important;\n}\n\n.todo-item :deep() .v-label {\n  padding-left: 8px;\n}\n</style>","import script from \"./TodoListWidget.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TodoListWidget.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TodoListWidget.vue?vue&type=style&index=0&id=aac8cf50&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-aac8cf50\"]])\n\nexport default __exports__"],"names":["BASE_PATH","submitUserTasks","async","apiClient","post","userTasks","updateUserTasks","put","deleteUserTasks","userId","taskId","delete","listUserTasks","get","store","useStore","error","ref","tasks","newTaskTitle","hasCompletedTasks","computed","value","some","task","completed","getters","fetchTasks","response","Array","isArray","err","handleNewTaskKeydown","event","key","isComposing","preventDefault","addTask","trim","newTask","title","createdAt","Date","toISOString","push","handleTaskCompletion","clearCompletedTasks","completedTasks","filter","Promise","all","map","onMounted","__exports__"],"sourceRoot":""}